component top : [a, b] -> [c] {
    auto c <> adder(8) <> [a, b]
}

component adder(WIDTH) : [a, b] -> [c] {
    wire a, b, c of bit(WIDTH)
    let ADDER(i) = [#-c[i], TO] <> full_adder <> [a[i]-#, b[i]-#, TO]
    let RES(i)   = if i == -1 then 1'b0 else ADDER(i) <> RES(i-1)
    IGNORE <> RES(WIDTH - 1)
}

component full_adder: [a, b, cin] -> [out, cout] {
    wire a, b, cin, out, cout of bit(1)
    [cout, out] <> [OR, TO] <> [TO, half_adder] <> [half_adder <> [a, b], cin]
}

component half_adder: [a, b] -> [carry, out] {
    auto out   <> XOR <> [a, b]
    auto carry <> AND <> [a, b]
}